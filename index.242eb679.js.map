{"mappings":"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","sources":["src/index.js","src/js/searchInput.js","src/js/filter.js"],"sourcesContent":["import './js/darkmode';\nimport './js/themoviedb';\nimport './js/fetchAPI';\nimport './js/pagination';\n\nimport './js/render-gallery';\n// import './js/libraryStorage';\nimport './js/modalTeam';\nimport './js/searchInput';\n\nimport './js/modal';\nimport './js/trailer';\nimport './js/filter';\n\nimport './js/spinner';\nimport './js/btn-up';\n","import Pagination from 'tui-pagination';\n\nimport { apiService } from './themoviedb';\nimport { getGenres } from './themoviedb.js';\nimport { renderGallery } from './render-gallery.js';\nimport { addPaginationGallery } from './pagination.js';\n\nconst NO_IMAGE = 'https://sd.keepcalms.com/i/sorry-no-picture-available-2.png';\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500/';\nconst form = document.querySelector('.search__form');\nconst galleryEl = document.querySelector('.gallery');\nconst message = document.querySelector('.header__message');\n\nform.addEventListener('submit', onSearch);\n\nconst ApiService = new apiService();\nlet page = 1;\n\nfunction onClear() {\n  galleryEl.innerHTML = '';\n}\n\nasync function onSearch(evn) {\n  evn.preventDefault();\n\n  ApiService.searchQuery = form.elements.searchQuery.value.trim();\n\n  if (!ApiService.searchQuery) {\n    createMessageInput();\n    return;\n  }\n\n  const request = await ApiService.getRequest(page).then(data => {\n    console.log(data);\n    renderGalleryinput(page);\n    if (!data.total_pages) {\n      createMessageInput();\n      return;\n    }\n    onClear();\n\n    const paginationOptions = {\n      totalItems: 0,\n      itemsPerPage: 20,\n      visiblePages: 5,\n      page: 1,\n      centerAlign: true,\n      template: {\n        page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n        currentPage:\n          '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n        moveButton:\n          '<a href=\"#\" class=\"tui-page-btn tui-{{type}} custom-class-{{type}}\">' +\n          '<span class=\"tui-ico-{{type}}\"></span>' +\n          '</a>',\n        disabledMoveButton:\n          '<span class=\"tui-page-btn tui-is-disabled tui-{{type}} custom-class-{{type}}\">' +\n          '<span class=\"tui-ico-{{type}}\"></span>' +\n          '</span>',\n        moreButton:\n          '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip custom-class-{{type}}\">' +\n          '<span class=\"tui-ico-ellip\"></span>' +\n          '</a>',\n      },\n    };\n\n    let pagination = new Pagination(\n      document.getElementById('pagination'),\n      paginationOptions\n    );\n    pagination.getCurrentPage();\n\n    let total = data.total_results;\n    pagination.reset(total);\n    pagination.on('afterMove', event => {\n      // Current pagination page go to trendingFilms.page\n      let currentPage = event.page;\n      ApiService.getRequest(page).then(data => {\n        data.page = currentPage;\n      });\n      renderGalleryinput(currentPage);\n    });\n  });\n}\n\nfunction renderGalleryinput(page) {\n  ApiService.getRequest(page).then(data => {\n    let markup = '';\n    data.results.forEach(\n      ({ id, poster_path = NO_IMAGE, genre_ids, title, release_date }) => {\n        let genresStr = getGenresSeach(genre_ids);\n        let year = !release_date ? '' : release_date.substring(0, 4);\n        if (genresStr && year) genresStr += ' | ';\n        if (!title) title = 'no information';\n        let newImg = !!poster_path ? IMG_URL + poster_path : NO_IMAGE;\n        markup += `<li class=\"gallery__item\">\n          <a href=\"#\" class=\"gallery__link\" data-id=\"${id}\">\n          <div class=\"gallery__thumb\">\n          <img class=\"gallery__img\" id=\"${id}\" src=\"${newImg} \"alt=\"${title}\" />\n          </div>\n          <div class=\"gallery__descr\">\n          <h2 class=\"gallery__title\">${title}</h2>\n          <p class=\"gallery__text\">${genresStr}${year}</p>\n          </div>\n          </a>\n          </li>`;\n      }\n    );\n\n    galleryEl.innerHTML = markup;\n  });\n}\n\nlet genresList;\nfunction getGenresSeach(genreSet) {\n  let genreStr = '';\n\n  if (!genreSet) return '';\n  genreSet.forEach(id => {\n    for (const genre of genresList) {\n      if (genre.id === id) genreStr += genre.name + ', ';\n    }\n  });\n\n  return !genreStr ? '' : genreStr.substring(0, genreStr.length - 2);\n}\ngetGenres().then(arr => {\n  genresList = Array.from(arr.genres);\n});\n\nfunction createMessageInput() {\n  message.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"header__message-error\">Search result not successful. Enter the correct movie name!</div>`\n  );\n  setTimeout(() => {\n    message.innerHTML = '';\n  }, 4000);\n\n  renderGallery(1);\n  addPaginationGallery();\n}\n","import FetchApi from './fetchAPI';\nimport Spinner from './spinner';\n\nimport axios from 'axios';\nimport { getGenres } from './themoviedb.js';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500/';\nconst form = document.querySelector('.search__form');\n\nconst refs = {\n  genresList: document.querySelector('.genres'),\n  filterNavBtn: document.querySelector('.navigation__filter'),\n  gallery: document.querySelector('.gallery'),\n};\n\n// console.log(refs.genresList);\n// console.log(refs.filterNavBtn);\n\nconst showGenreFilter = () => refs.genresList.classList.toggle('genres--shown');\n\nrefs.filterNavBtn.addEventListener('click', showGenreFilter);\nrefs.genresList.addEventListener('click', sortByGenre);\n\nlet trendFilmsList = [];\nlet genre = 4;\nlet page = 1;\n\nasync function sortByGenre(elem) {\n  elem.preventDefault();\n  form.reset();\n\n  if (!elem.target.id) {\n    return;\n  }\n\n  genre = Number(elem.target.id);\n  console.log(Number(elem.target.id));\n  await fetchGenres(page, genre).then(data => {\n    trendFilmsList = [];\n    data.results.forEach(movie => {\n      let movieData = {\n        id: movie.id,\n        poster: movie.poster_path,\n        title: movie.original_title,\n        genres: movie.genre_ids,\n        year: movie.release_date.slice(0, 4),\n        vote: movie.vote_average.toFixed(1),\n      };\n      trendFilmsList.push(movieData);\n    });\n  });\n  await getGenres()\n    .then(({ genres }) => {\n      trendFilmsList.forEach(movie => {\n        movie.genres = movie.genres.map(id => {\n          genres.forEach(obj => {\n            if (obj.id === id) {\n              id = obj.name;\n            }\n          });\n          return id;\n        });\n        switch (true) {\n          case movie.genres.length > 0 && movie.genres.length <= 2:\n            movie.genres = movie.genres.join(', ');\n            break;\n\n          case movie.genres.length > 2:\n            movie.genres[2] = 'Other';\n            movie.genres = movie.genres.slice(0, 3).join(', ');\n            break;\n\n          default:\n            movie.genres = 'Genre N/A';\n            break;\n        }\n      });\n    })\n    .catch(error => {\n      console.log('Failed to get genres : ', error);\n\n      trendFilmsList.map(movie => (movie.genres = 'Genres N/A'));\n    });\n  refs.gallery.innerHTML = trendFilmsList\n    .map(({ id, poster, title, genres, year, vote }) => {\n      return `<li class=\"gallery__item\">\n      <a href=\"#\" class=\"gallery__link\" data-id=\"${id}\">\n      <div class=\"gallery__thumb\">\n      <img class=\"gallery__img\" id=\"${id}\" src=\"${IMG_URL + poster}\n      \"alt=\"${title}\" />\n      </div>\n      <div class=\"gallery__descr\">\n      <h2 class=\"gallery__title\">${title}</h2>\n      <p class=\"gallery__text\">${genres} | ${year}</p>\n      </div></a></li>`;\n    })\n    .join('');\n}\n\nasync function fetchGenres(page, genre) {\n  try {\n    const url = `https://api.themoviedb.org/3/discover/movie?api_key=e146a7a5146c0f8a3c3cd99167c5b659&language=en-US&sort_by=popularity.desc&include_adult=false&page=${page}&with_genres=${genre}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(`an error occurred` + error);\n  }\n}\n"],"names":["parcelRequire","$bpxeT","$f9f01a610c145043$var$NO_IMAGE","$f9f01a610c145043$var$form","document","querySelector","$f9f01a610c145043$var$galleryEl","$f9f01a610c145043$var$message","addEventListener","evn","$f9f01a610c145043$var$_onSearch","apply","this","arguments","$f9f01a610c145043$var$genresList","$f9f01a610c145043$var$ApiService","$54vAX","apiService","$f9f01a610c145043$var$onClear","innerHTML","$parcel$interopDefault","$2TvXO","mark","_callee","preventDefault","searchQuery","elements","value","trim","$f9f01a610c145043$var$createMessageInput","getRequest","then","data1","console","log","$f9f01a610c145043$var$renderGalleryinput","total_pages","pagination","$1VFfL","getElementById","totalItems","itemsPerPage","visiblePages","page","centerAlign","template","currentPage","moveButton","disabledMoveButton","moreButton","getCurrentPage","total","total_results","reset","on","event","data","_ctx","sent","page1","markup","results","forEach","param","genreSet","genreStr","id","_poster_path","poster_path","genre_ids","title","release_date","genresStr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","genre","name","err","return","substring","length","year","newImg","concat","insertAdjacentHTML","setTimeout","$faNkY","renderGallery","$jcFG7","addPaginationGallery","getGenres","arr","Array","from","genres","$6142fea1849c7fbd$var$IMG_URL","$6142fea1849c7fbd$var$form","$6142fea1849c7fbd$var$refs","genresList","filterNavBtn","gallery","classList","toggle","elem","$6142fea1849c7fbd$var$_sortByGenre","$6142fea1849c7fbd$var$trendFilmsList","$6142fea1849c7fbd$var$genre","target","Number","$6142fea1849c7fbd$var$fetchGenres","movie","movieData","poster","original_title","slice","vote","vote_average","toFixed","push","map","obj","join","catch","error","genre1","$6142fea1849c7fbd$var$_fetchGenres","url","response","$dIxxU","default","get","t0"],"version":3,"file":"index.242eb679.js.map"}