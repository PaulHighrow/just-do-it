{"mappings":"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","sources":["src/index.js","src/js/searchInput.js","src/js/filter.js"],"sourcesContent":["import './js/darkmode';\nimport './js/themoviedb';\nimport './js/fetchAPI';\nimport './js/pagination';\n\nimport './js/render-gallery';\n// import './js/libraryStorage';\nimport './js/modalTeam';\nimport './js/searchInput';\n\nimport './js/modal';\nimport './js/trailer';\nimport './js/filter';\n\nimport './js/spinner';\nimport './js/btn-up';\n","import Pagination from 'tui-pagination';\n\nimport { apiService } from './themoviedb';\nimport { getGenres } from './themoviedb.js';\nimport { renderGallery } from './render-gallery.js';\nimport { addPaginationGallery } from './pagination.js';\n\nconst NO_IMAGE = 'https://sd.keepcalms.com/i/sorry-no-picture-available-2.png';\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500/';\nconst form = document.querySelector('.search__form');\nconst galleryEl = document.querySelector('.gallery');\nconst message = document.querySelector('.header__message');\n\nform.addEventListener('submit', onSearch);\n\nconst ApiService = new apiService();\nlet page = 1;\n\nfunction onClear() {\n  galleryEl.innerHTML = '';\n}\n\nasync function onSearch(evn) {\n  evn.preventDefault();\n\n  ApiService.searchQuery = form.elements.searchQuery.value.trim();\n\n  if (!ApiService.searchQuery) {\n    createMessageInput();\n    return;\n  }\n\n  const request = await ApiService.getRequest(page).then(data => {\n    console.log(data);\n    renderGalleryinput(page);\n    if (!data.total_pages) {\n      createMessageInput();\n      return;\n    }\n    onClear();\n\n    const paginationOptions = {\n      totalItems: 0,\n      itemsPerPage: 20,\n      visiblePages: 5,\n      page: 1,\n      centerAlign: true,\n      template: {\n        page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n        currentPage:\n          '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n        moveButton:\n          '<a href=\"#\" class=\"tui-page-btn tui-{{type}} custom-class-{{type}}\">' +\n          '<span class=\"tui-ico-{{type}}\"></span>' +\n          '</a>',\n        disabledMoveButton:\n          '<span class=\"tui-page-btn tui-is-disabled tui-{{type}} custom-class-{{type}}\">' +\n          '<span class=\"tui-ico-{{type}}\"></span>' +\n          '</span>',\n        moreButton:\n          '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip custom-class-{{type}}\">' +\n          '<span class=\"tui-ico-ellip\"></span>' +\n          '</a>',\n      },\n    };\n\n    let pagination = new Pagination(\n      document.getElementById('pagination'),\n      paginationOptions\n    );\n    pagination.getCurrentPage();\n\n    let total = data.total_results;\n    pagination.reset(total);\n    pagination.on('afterMove', event => {\n      // Current pagination page go to trendingFilms.page\n      let currentPage = event.page;\n      ApiService.getRequest(page).then(data => {\n        data.page = currentPage;\n      });\n      renderGalleryinput(currentPage);\n    });\n  });\n}\n\nfunction renderGalleryinput(page) {\n  ApiService.getRequest(page).then(data => {\n    let markup = '';\n    data.results.forEach(\n      ({ id, poster_path = NO_IMAGE, genre_ids, title, release_date }) => {\n        let genresStr = getGenresSeach(genre_ids);\n        let year = !release_date ? '' : release_date.substring(0, 4);\n        if (genresStr && year) genresStr += ' | ';\n        if (!title) title = 'no information';\n        let newImg = !!poster_path ? IMG_URL + poster_path : NO_IMAGE;\n        markup += `<li class=\"gallery__item\">\n          <a href=\"#\" class=\"gallery__link\" data-id=\"${id}\">\n          <div class=\"gallery__thumb\">\n          <img class=\"gallery__img\" id=\"${id}\" src=\"${newImg} \"alt=\"${title}\" />\n          </div>\n          <div class=\"gallery__descr\">\n          <h2 class=\"gallery__title\">${title}</h2>\n          <p class=\"gallery__text\">${genresStr}${year}</p>\n          </div>\n          </a>\n          </li>`;\n      }\n    );\n\n    galleryEl.innerHTML = markup;\n  });\n}\n\nlet genresList;\nfunction getGenresSeach(genreSet) {\n  let genreStr = '';\n\n  if (!genreSet) return '';\n  genreSet.forEach(id => {\n    for (const genre of genresList) {\n      if (genre.id === id) genreStr += genre.name + ', ';\n    }\n  });\n\n  return !genreStr ? '' : genreStr.substring(0, genreStr.length - 2);\n}\ngetGenres().then(arr => {\n  genresList = Array.from(arr.genres);\n});\n\nfunction createMessageInput() {\n  message.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"header__message-error\">Search result not successful. Enter the correct movie name!</div>`\n  );\n  setTimeout(() => {\n    message.innerHTML = '';\n  }, 4000);\n\n  renderGallery(1);\n  addPaginationGallery();\n}\n","import FetchApi from './fetchAPI';\nimport Spinner from './spinner';\n\nimport axios from 'axios';\nimport { getGenres } from './themoviedb.js';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500/';\nconst form = document.querySelector('.search__form');\n\nconst refs = {\n  genresList: document.querySelector('.genres'),\n  filterNavBtn: document.querySelector('.navigation__filter'),\n  gallery: document.querySelector('.gallery'),\n};\n\nconsole.log(refs.genresList);\nconsole.log(refs.filterNavBtn);\n\nconst showGenreFilter = () => refs.genresList.classList.toggle('genres--shown');\n\nrefs.filterNavBtn.addEventListener('click', showGenreFilter);\nrefs.genresList.addEventListener('click', sortByGenre);\n\nlet trendFilmsList = [];\nlet genre = 4;\nlet page = 1;\n\nasync function sortByGenre(elem) {\n  elem.preventDefault();\n  form.reset();\n\n  if (!elem.target.id) {\n    return;\n  }\n\n  genre = Number(elem.target.id);\n  console.log(Number(elem.target.id));\n  await fetchGenres(page, genre).then(data => {\n    trendFilmsList = [];\n    data.results.forEach(movie => {\n      let movieData = {\n        id: movie.id,\n        poster: movie.poster_path,\n        title: movie.original_title,\n        genres: movie.genre_ids,\n        year: movie.release_date.slice(0, 4),\n        vote: movie.vote_average.toFixed(1),\n      };\n      trendFilmsList.push(movieData);\n    });\n  });\n  await getGenres()\n    .then(({ genres }) => {\n      trendFilmsList.forEach(movie => {\n        movie.genres = movie.genres.map(id => {\n          genres.forEach(obj => {\n            if (obj.id === id) {\n              id = obj.name;\n            }\n          });\n          return id;\n        });\n        switch (true) {\n          case movie.genres.length > 0 && movie.genres.length <= 2:\n            movie.genres = movie.genres.join(', ');\n            break;\n\n          case movie.genres.length > 2:\n            movie.genres[2] = 'Other';\n            movie.genres = movie.genres.slice(0, 3).join(', ');\n            break;\n\n          default:\n            movie.genres = 'Genre N/A';\n            break;\n        }\n      });\n    })\n    .catch(error => {\n      console.log('Failed to get genres : ', error);\n\n      trendFilmsList.map(movie => (movie.genres = 'Genres N/A'));\n    });\n  refs.gallery.innerHTML = trendFilmsList\n    .map(({ id, poster, title, genres, year, vote }) => {\n      return `<li class=\"gallery__item\">\n      <a href=\"#\" class=\"gallery__link\" data-id=\"${id}\">\n      <div class=\"gallery__thumb\">\n      <img class=\"gallery__img\" id=\"${id}\" src=\"${IMG_URL + poster}\n      \"alt=\"${title}\" />\n      </div>\n      <div class=\"gallery__descr\">\n      <h2 class=\"gallery__title\">${title}</h2>\n      <p class=\"gallery__text\">${genres} | ${year}</p>\n      </div></a></li>`;\n    })\n    .join('');\n}\n\nasync function fetchGenres(page, genre) {\n  try {\n    const url = `https://api.themoviedb.org/3/discover/movie?api_key=e146a7a5146c0f8a3c3cd99167c5b659&language=en-US&sort_by=popularity.desc&include_adult=false&page=${page}&with_genres=${genre}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(`an error occurred` + error);\n  }\n}\n"],"names":["parcelRequire","$fb9GJ","$e5daf205435c8af5$var$form","document","querySelector","$e5daf205435c8af5$var$galleryEl","$e5daf205435c8af5$var$message","addEventListener","async","evn","preventDefault","$e5daf205435c8af5$var$ApiService","searchQuery","elements","value","trim","$e5daf205435c8af5$var$createMessageInput","getRequest","then","data1","console","log","$e5daf205435c8af5$var$renderGalleryinput","total_pages","innerHTML","pagination","$parcel$interopDefault","getElementById","totalItems","itemsPerPage","visiblePages","page","centerAlign","template","currentPage","moveButton","disabledMoveButton","moreButton","getCurrentPage","total","total_results","reset","on","event","data","$662h5","apiService","$e5daf205435c8af5$var$genresList","page1","markup","results","forEach","id","poster_path","genre_ids","title","release_date","genresStr","genreSet","genreStr","genre","name","substring","length","$e5daf205435c8af5$var$getGenresSeach","year","insertAdjacentHTML","setTimeout","$34HY9","renderGallery","$2nhTy","addPaginationGallery","getGenres","arr","Array","from","genres","$cc8167df025acb14$var$form","$cc8167df025acb14$var$refs","genresList","filterNavBtn","gallery","classList","toggle","elem","target","$cc8167df025acb14$var$genre","Number","genre1","url","$2shzp","default","get","error","$cc8167df025acb14$var$fetchGenres","$cc8167df025acb14$var$trendFilmsList","movie","movieData","poster","original_title","slice","vote","vote_average","toFixed","push","map","obj","join","catch"],"version":3,"file":"index.e4a6e799.js.map"}